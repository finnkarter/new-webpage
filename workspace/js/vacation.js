/**
 * Ìú¥Í∞Ä Í¥ÄÎ¶¨ ÌéòÏù¥ÏßÄ JavaScript
 * MILBASE - Íµ∞ÏÇ¨ Í∞úÏù∏ ÎåÄÏãúÎ≥¥Îìú
 */

class VacationManager {
    constructor() {
        this.currentDate = new Date();
        this.vacationDays = this.loadVacationData();
        this.checklistData = this.loadChecklistData();
        this.travelPlans = this.loadTravelPlans();
        
        this.init();
    }

    init() {
        this.generateCalendar();
        this.updateVacationStats();
        this.renderChecklists();
        this.setupEventListeners();
        this.startDDayCounter();
    }

    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    loadVacationData() {
        const defaultData = {
            totalDays: 20,
            usedDays: 8,
            annualLeave: { total: 15, used: 6 },
            compensatoryLeave: { total: 4, used: 2 },
            comfortLeave: { total: 1, used: 0 },
            vacationDates: [
                '2024-02-01', '2024-02-02', '2024-02-03',
                '2024-03-15', '2024-03-16', '2024-03-17'
            ]
        };
        
        const saved = localStorage.getItem('milbase_vacation_data');
        return saved ? JSON.parse(saved) : defaultData;
    }

    loadChecklistData() {
        const defaultChecklist = {
            preVacation: [
                { id: 1, text: 'Ìú¥Í∞ÄÏã†Ï≤≠ÏÑú Ï†úÏ∂ú', completed: true },
                { id: 2, text: 'Î∂ÄÎåÄ ÏóÖÎ¨¥ Ïù∏ÏàòÏù∏Í≥Ñ', completed: true },
                { id: 3, text: 'ÏàôÏÜå ÏòàÏïΩ ÌôïÏù∏', completed: false },
                { id: 4, text: 'ÍµêÌÜµÌé∏ ÏòàÏïΩ', completed: false },
                { id: 5, text: 'ÎπÑÏÉÅÏó∞ÎùΩÎßù Í≥µÏú†', completed: true }
            ],
            packing: [
                { id: 6, text: 'Íµ∞Î≥µ Î∞è Í∞úÏù∏ Ïû•ÎπÑ', completed: false },
                { id: 7, text: 'ÏÑ∏Î©¥ÎèÑÍµ¨', completed: false },
                { id: 8, text: 'Ïó¨Î∂Ñ Ïò∑Í∞ÄÏßÄ', completed: false },
                { id: 9, text: 'Ï∂©Ï†ÑÍ∏∞ Î∞è Ï†ÑÏûêÍ∏∞Í∏∞', completed: false },
                { id: 10, text: 'Ïã†Î∂ÑÏ¶ù Î∞è ÌïÑÏàò ÏÑúÎ•ò', completed: true }
            ],
            return: [
                { id: 11, text: 'Î≥µÍ∑Ä ÏãúÍ∞Ñ ÌôïÏù∏', completed: false },
                { id: 12, text: 'ÍµêÌÜµÌé∏ ÏòàÏïΩ (Î≥µÍ∑Ä)', completed: false },
                { id: 13, text: 'Î∂ÄÎåÄ Ïó∞ÎùΩ', completed: false },
                { id: 14, text: 'Í∞úÏù∏ Î¨ºÌíà Ï†ïÎ¶¨', completed: false },
                { id: 15, text: 'ÏóÖÎ¨¥ Ïû¨Í∞ú Ï§ÄÎπÑ', completed: false }
            ]
        };

        const saved = localStorage.getItem('milbase_checklist_data');
        return saved ? JSON.parse(saved) : defaultChecklist;
    }

    loadTravelPlans() {
        const defaultPlans = [
            {
                id: 1,
                title: 'üèîÔ∏è Ï†úÏ£ºÎèÑ Ïó¨Ìñâ',
                status: 'Í≥ÑÌöçÏ§ë',
                startDate: '2024-03-15',
                endDate: '2024-03-17',
                duration: 3,
                budget: 500000,
                people: 2,
                satisfaction: null
            },
            {
                id: 2,
                title: 'üèîÔ∏è Í∞ïÏõêÎèÑ Ïä§ÌÇ§',
                status: 'ÏôÑÎ£å',
                startDate: '2024-02-01',
                endDate: '2024-02-03',
                duration: 3,
                budget: 350000,
                people: 1,
                satisfaction: 5
            }
        ];

        const saved = localStorage.getItem('milbase_travel_plans');
        return saved ? JSON.parse(saved) : defaultPlans;
    }

    // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
    saveVacationData() {
        localStorage.setItem('milbase_vacation_data', JSON.stringify(this.vacationDays));
    }

    saveChecklistData() {
        localStorage.setItem('milbase_checklist_data', JSON.stringify(this.checklistData));
    }

    saveTravelPlans() {
        localStorage.setItem('milbase_travel_plans', JSON.stringify(this.travelPlans));
    }

    // Ï∫òÎ¶∞Îçî ÏÉùÏÑ±
    generateCalendar() {
        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();
        
        // Ï∫òÎ¶∞Îçî Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏
        document.getElementById('calendarTitle').textContent = 
            `${year}ÎÖÑ ${month + 1}Ïõî`;
        
        // Ï≤´ Î≤àÏß∏ ÎÇ†Í≥º ÎßàÏßÄÎßâ ÎÇ† Í≥ÑÏÇ∞
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay());
        
        const calendarGrid = document.getElementById('calendarGrid');
        calendarGrid.innerHTML = '';
        
        // ÏöîÏùº Ìó§Îçî Ï∂îÍ∞Ä
        const weekdays = ['Ïùº', 'Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†'];
        weekdays.forEach(day => {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day day-header';
            dayElement.textContent = day;
            calendarGrid.appendChild(dayElement);
        });
        
        // Ï∫òÎ¶∞Îçî ÎÇ†Ïßú ÏÉùÏÑ±
        const currentDay = new Date(startDate);
        for (let i = 0; i < 42; i++) {
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            dayElement.textContent = currentDay.getDate();
            
            const dateString = currentDay.toISOString().split('T')[0];
            
            // ÌòÑÏû¨ ÏõîÏù¥ ÏïÑÎãå ÎÇ†ÏßúÎäî ÌùêÎ¶¨Í≤å
            if (currentDay.getMonth() !== month) {
                dayElement.style.opacity = '0.3';
            }
            
            // Ìú¥Í∞Ä ÎÇ†Ïßú Ï≤¥ÌÅ¨
            if (this.vacationDays.vacationDates.includes(dateString)) {
                dayElement.classList.add('vacation');
            }
            
            // Ïò§Îäò ÎÇ†Ïßú ÌëúÏãú
            const today = new Date();
            if (currentDay.toDateString() === today.toDateString()) {
                dayElement.style.background = 'rgba(var(--accent-rgb), 0.3)';
                dayElement.style.fontWeight = 'bold';
            }
            
            // ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
            dayElement.addEventListener('click', () => {
                this.toggleVacationDay(dateString, dayElement);
            });
            
            calendarGrid.appendChild(dayElement);
            currentDay.setDate(currentDay.getDate() + 1);
        }
    }

    // Ìú¥Í∞Ä ÎÇ†Ïßú ÌÜ†Í∏Ä
    toggleVacationDay(dateString, element) {
        const index = this.vacationDays.vacationDates.indexOf(dateString);
        
        if (index > -1) {
            // Ìú¥Í∞Ä Ï†úÍ±∞
            this.vacationDays.vacationDates.splice(index, 1);
            element.classList.remove('vacation');
            this.vacationDays.usedDays--;
        } else {
            // Ìú¥Í∞Ä Ï∂îÍ∞Ä
            this.vacationDays.vacationDates.push(dateString);
            element.classList.add('vacation');
            this.vacationDays.usedDays++;
        }
        
        this.saveVacationData();
        this.updateVacationStats();
    }

    // Ìú¥Í∞Ä ÌÜµÍ≥Ñ ÏóÖÎç∞Ïù¥Ìä∏
    updateVacationStats() {
        const remainingDays = this.vacationDays.totalDays - this.vacationDays.usedDays;
        
        document.getElementById('totalVacationDays').textContent = this.vacationDays.totalDays;
        document.getElementById('usedVacationDays').textContent = this.vacationDays.usedDays;
        document.getElementById('remainingVacationDays').textContent = remainingDays;
        
        // Îã§Ïùå Ìú¥Í∞ÄÍπåÏßÄ D-Day Í≥ÑÏÇ∞
        this.updateNextVacationDDay();
    }

    // Îã§Ïùå Ìú¥Í∞ÄÍπåÏßÄ D-Day Í≥ÑÏÇ∞
    updateNextVacationDDay() {
        const today = new Date();
        const todayString = today.toISOString().split('T')[0];
        
        // Ïò§Îäò Ïù¥ÌõÑÏùò Ìú¥Í∞Ä ÎÇ†Ïßú Ï∞æÍ∏∞
        const futurVacations = this.vacationDays.vacationDates
            .filter(date => date > todayString)
            .sort();
        
        if (futurVacations.length > 0) {
            const nextVacation = new Date(futurVacations[0]);
            const timeDiff = nextVacation.getTime() - today.getTime();
            const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
            
            document.getElementById('nextVacationDays').textContent = daysDiff;
        } else {
            document.getElementById('nextVacationDays').textContent = '-';
        }
    }

    // D-Day Ïπ¥Ïö¥ÌÑ∞ ÏãúÏûë
    startDDayCounter() {
        // 1Î∂ÑÎßàÎã§ ÏóÖÎç∞Ïù¥Ìä∏
        setInterval(() => {
            this.updateNextVacationDDay();
        }, 60000);
    }

    // Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Î†åÎçîÎßÅ
    renderChecklists() {
        this.renderChecklistSection('preVacationChecklist', this.checklistData.preVacation);
        this.renderChecklistSection('travelPackingChecklist', this.checklistData.packing);
        this.renderChecklistSection('returnChecklist', this.checklistData.return);
    }

    renderChecklistSection(containerId, items) {
        const container = document.getElementById(containerId);
        container.innerHTML = '';
        
        items.forEach(item => {
            const itemElement = document.createElement('div');
            itemElement.className = 'checklist-item';
            itemElement.innerHTML = `
                <label style="display: flex; align-items: center; gap: 0.5rem; cursor: pointer; padding: 0.75rem; background: rgba(255, 255, 255, 0.05); border-radius: var(--border-radius-sm); margin-bottom: 0.5rem; transition: all var(--transition-smooth);">
                    <input type="checkbox" ${item.completed ? 'checked' : ''} 
                           onchange="vacationManager.toggleChecklistItem('${containerId}', ${item.id})"
                           style="accent-color: var(--primary);">
                    <span style="color: var(--color-text); ${item.completed ? 'text-decoration: line-through; opacity: 0.7;' : ''}">${item.text}</span>
                </label>
            `;
            
            container.appendChild(itemElement);
        });
    }

    // Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ìï≠Î™© ÌÜ†Í∏Ä
    toggleChecklistItem(section, itemId) {
        let items;
        switch(section) {
            case 'preVacationChecklist':
                items = this.checklistData.preVacation;
                break;
            case 'travelPackingChecklist':
                items = this.checklistData.packing;
                break;
            case 'returnChecklist':
                items = this.checklistData.return;
                break;
        }
        
        const item = items.find(i => i.id === itemId);
        if (item) {
            item.completed = !item.completed;
            this.saveChecklistData();
            this.renderChecklists();
        }
    }

    // Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ìï≠Î™© Ï∂îÍ∞Ä
    addChecklistItem() {
        const text = prompt('ÏÉà Ìï≠Î™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:');
        if (text && text.trim()) {
            const section = prompt('Ïñ¥Îäê ÏÑπÏÖòÏóê Ï∂îÍ∞ÄÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n1: Ìú¥Í∞Ä Ï†Ñ Ï§ÄÎπÑ\n2: Ïó¨Ìñâ Ï§ÄÎπÑÎ¨º\n3: Î≥µÍ∑Ä Ï§ÄÎπÑ');
            
            let targetArray;
            switch(section) {
                case '1':
                    targetArray = this.checklistData.preVacation;
                    break;
                case '2':
                    targetArray = this.checklistData.packing;
                    break;
                case '3':
                    targetArray = this.checklistData.return;
                    break;
                default:
                    alert('Ïò¨Î∞îÎ•∏ ÏÑπÏÖò Î≤àÌò∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.');
                    return;
            }
            
            const newId = Math.max(...Object.values(this.checklistData).flat().map(i => i.id)) + 1;
            targetArray.push({
                id: newId,
                text: text.trim(),
                completed: false
            });
            
            this.saveChecklistData();
            this.renderChecklists();
        }
    }

    // Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏ Ï¥àÍ∏∞Ìôî
    resetChecklist() {
        if (confirm('Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏Î•º Ï¥àÍ∏∞ÌôîÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            localStorage.removeItem('milbase_checklist_data');
            this.checklistData = this.loadChecklistData();
            this.renderChecklists();
        }
    }

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    setupEventListeners() {
        // Ï∫òÎ¶∞Îçî ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò
        document.getElementById('prevMonth').addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() - 1);
            this.generateCalendar();
        });
        
        document.getElementById('nextMonth').addEventListener('click', () => {
            this.currentDate.setMonth(this.currentDate.getMonth() + 1);
            this.generateCalendar();
        });
        
        // Îπ†Î•∏ Ïï°ÏÖò Î≤ÑÌäºÎì§
        document.getElementById('addVacationBtn').addEventListener('click', () => {
            this.showAddVacationModal();
        });
        
        document.getElementById('planVacationBtn').addEventListener('click', () => {
            this.showTravelPlanModal();
        });
        
        document.getElementById('addChecklistItem').addEventListener('click', () => {
            this.addChecklistItem();
        });
        
        document.getElementById('resetChecklist').addEventListener('click', () => {
            this.resetChecklist();
        });
    }

    // Ìú¥Í∞Ä Ï∂îÍ∞Ä Î™®Îã¨ (Í∞ÑÎã®Ìïú ÌîÑÎ°¨ÌîÑÌä∏Î°ú Íµ¨ÌòÑ)
    showAddVacationModal() {
        const startDate = prompt('Ìú¥Í∞Ä ÏãúÏûëÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (YYYY-MM-DD):');
        if (!startDate) return;
        
        const endDate = prompt('Ìú¥Í∞Ä Ï¢ÖÎ£åÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (YYYY-MM-DD):');
        if (!endDate) return;
        
        // ÎÇ†Ïßú Î≤îÏúÑ Ï∂îÍ∞Ä
        const start = new Date(startDate);
        const end = new Date(endDate);
        const current = new Date(start);
        
        while (current <= end) {
            const dateString = current.toISOString().split('T')[0];
            if (!this.vacationDays.vacationDates.includes(dateString)) {
                this.vacationDays.vacationDates.push(dateString);
                this.vacationDays.usedDays++;
            }
            current.setDate(current.getDate() + 1);
        }
        
        this.saveVacationData();
        this.generateCalendar();
        this.updateVacationStats();
        
        alert('Ìú¥Í∞ÄÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!');
    }

    // Ïó¨Ìñâ Í≥ÑÌöç Î™®Îã¨
    showTravelPlanModal() {
        const title = prompt('Ïó¨Ìñâ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:');
        if (!title) return;
        
        const startDate = prompt('Ïó¨Ìñâ ÏãúÏûëÏùº (YYYY-MM-DD):');
        if (!startDate) return;
        
        const endDate = prompt('Ïó¨Ìñâ Ï¢ÖÎ£åÏùº (YYYY-MM-DD):');
        if (!endDate) return;
        
        const budget = prompt('ÏòàÏÇ∞ (Ïõê):');
        const people = prompt('Ïù∏Ïõê Ïàò:');
        
        const newPlan = {
            id: Date.now(),
            title: title,
            status: 'Í≥ÑÌöçÏ§ë',
            startDate: startDate,
            endDate: endDate,
            duration: Math.ceil((new Date(endDate) - new Date(startDate)) / (1000 * 60 * 60 * 24)) + 1,
            budget: parseInt(budget) || 0,
            people: parseInt(people) || 1,
            satisfaction: null
        };
        
        this.travelPlans.push(newPlan);
        this.saveTravelPlans();
        
        alert('Ïó¨Ìñâ Í≥ÑÌöçÏù¥ Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§!');
        // Ïã§Ï†úÎ°úÎäî Ïó¨Ìñâ Í≥ÑÌöç ÏÑπÏÖòÏùÑ Îã§Ïãú Î†åÎçîÎßÅÌï¥Ïïº Ìï®
    }
}

// Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú ÏÑ§Ï†ïÌïòÏó¨ HTMLÏóêÏÑú Ï†ëÍ∑º Í∞ÄÎä•ÌïòÍ≤å Ìï®
let vacationManager;

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', () => {
    vacationManager = new VacationManager();
    
    // ÌéòÏù¥ÏßÄ Ïï†ÎãàÎ©îÏù¥ÏÖò
    const sections = document.querySelectorAll('.vacation-section');
    sections.forEach((section, index) => {
        section.style.opacity = '0';
        section.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            section.style.transition = 'all 0.6s ease-out';
            section.style.opacity = '1';
            section.style.transform = 'translateY(0)';
        }, index * 100);
    });
    
    // Toast ÏïåÎ¶º ÏãúÏä§ÌÖú (ÎßåÏïΩ components.jsÏóê ÏûàÎã§Î©¥)
    if (typeof Toast !== 'undefined') {
        window.showToast = (message, type = 'success') => {
            new Toast(message, type).show();
        };
    }
});

// Ïú†Ìã∏Î¶¨Ìã∞ Ìï®ÏàòÎì§
const VacationUtils = {
    // ÎÇ†Ïßú Ìè¨Îß∑ÌåÖ
    formatDate(dateString) {
        const date = new Date(dateString);
        return `${date.getMonth() + 1}Ïõî ${date.getDate()}Ïùº`;
    },
    
    // Í∏àÏï° Ìè¨Îß∑ÌåÖ
    formatCurrency(amount) {
        return new Intl.NumberFormat('ko-KR', {
            style: 'currency',
            currency: 'KRW'
        }).format(amount);
    },
    
    // ÎÇ†Ïßú Ï∞®Ïù¥ Í≥ÑÏÇ∞
    calculateDaysDiff(startDate, endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        return Math.ceil((end - start) / (1000 * 60 * 60 * 24));
    }
};
